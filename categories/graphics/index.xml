<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>graphics on José Villegas</title>
    <link>https://jose-villegas.github.io/categories/graphics/</link>
    <description>Recent content in graphics on José Villegas</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 May 2017 00:00:00 +0200</lastBuildDate>
    
	<atom:link href="https://jose-villegas.github.io/categories/graphics/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Volume Rendering with Style Transfer Function</title>
      <link>https://jose-villegas.github.io/post/styletransfer/</link>
      <pubDate>Sun, 14 May 2017 00:00:00 +0200</pubDate>
      
      <guid>https://jose-villegas.github.io/post/styletransfer/</guid>
      <description>&lt;p&gt;This technique implements style transfer functions for volume rendering. Style transfer is extremely convenient for volume rendering as it adds a really great dimension of realism with little overhead. The technique is based on this &lt;a href=&#34;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.230.9247&amp;amp;rep=rep1&amp;amp;type=pdf&#34;&gt;paper&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Low Poly Water in Unity</title>
      <link>https://jose-villegas.github.io/post/low_poly_water/</link>
      <pubDate>Tue, 18 Apr 2017 00:00:00 +0200</pubDate>
      
      <guid>https://jose-villegas.github.io/post/low_poly_water/</guid>
      <description>&lt;p&gt;I wanted to do a small tests with shaders in Unity to simulate water using sum of sines. This technique is well explained here in &lt;a href=&#34;https://developer.nvidia.com/sites/all/modules/custom/gpugems/books/GPUGems/gpugems_ch01.html&#34;&gt;GPU GEMS&lt;/a&gt;. My twist was just using flat shading. The reposity was well received in my &lt;a href=&#34;https://github.com/jose-villegas/LowPolyWater&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Deferred Voxel Shading for Real Time Global Illumination</title>
      <link>https://jose-villegas.github.io/post/deferred_voxel_shading/</link>
      <pubDate>Wed, 18 Jan 2017 00:00:00 +0200</pubDate>
      
      <guid>https://jose-villegas.github.io/post/deferred_voxel_shading/</guid>
      <description>&lt;p&gt;Computing indirect illumination is a challenging and complex problem for real-time rendering in 3D applications. This global illumination approach computes indirect lighting in real time utilizing a simpliﬁed version of the outgoing radiance and the scene stored in voxels.&lt;/p&gt;

&lt;p&gt;This was my master thesis for computer graphics, I also published a paper about this technique.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Fur Rendering in Unity</title>
      <link>https://jose-villegas.github.io/post/fur_unity/</link>
      <pubDate>Thu, 12 Jan 2017 00:00:00 +0200</pubDate>
      
      <guid>https://jose-villegas.github.io/post/fur_unity/</guid>
      <description>&lt;p&gt;This is a small shader that implements fur rendering in Unity using shell texturing. The technique is well explained on this &lt;a href=&#34;http://hhoppe.com/fur.pdf&#34;&gt;paper&lt;/a&gt;. Though easy to implement it was well received on my &lt;a href=&#34;https://github.com/jose-villegas/FurRendering&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Simple Raytracer</title>
      <link>https://jose-villegas.github.io/post/simpleraytracer/</link>
      <pubDate>Wed, 03 Dec 2014 00:00:00 +0200</pubDate>
      
      <guid>https://jose-villegas.github.io/post/simpleraytracer/</guid>
      <description>&lt;p&gt;This was an extremely simple raytracer I wrote in college for an assignment. The source code can be found &lt;a href=&#34;https://github.com/jose-villegas/Simple-Raytracer&#34;&gt;here on my GitHub&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>